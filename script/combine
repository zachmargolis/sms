#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), '..', 'src/main/ruby'))

require 'csv'
require 'time'
require 'database'
require 'active_support/time'
require 'set'

if ARGV.empty?
  abort "Usage: #{$0} database1.sqlite [database2.sqlite...]"
end

@print_warnings = ENV['PRINT_WARNINGS']
@zone = ActiveSupport::TimeZone.new('UTC')

def next_message_id
  @next_message_id ||= 0
  @next_message_id += 1
end

def timestamp_ms(date)
  date.to_i * 1000
end

def just_emojis(text)
  text && text.chars.select { |c| c.ord > 1000 }.join
end

def each_by_page(relation, &block)
  total = relation.count
  page_size = 1000
  num_pages = (total.to_f / page_size).ceil

  results = []
  num_pages.times.each do |page|
    results += relation
      .offset(page * page_size)
      .first(page_size)
      .map(&block)
  end
  results
end

def load_v1(file, database, csv, guids)
  require 'models/v1'

  Models::V1.with_db(database) do
    each_by_page(Models::V1::Message.eager(:group_member)) do |message|
      guid = "#{message.ROWID}|#{message.date}"

      if guids.include?(guid)
        $stderr.puts "skipping #{guid}" if @print_warnings
        next
      end

      guids << guid

      csv << [
        file,                                        # file_id
        next_message_id,                             # message_id
        timestamp_ms(message.timestamp),             # timestamp_ms
        'SMS',                                       # type
        message.group_member.count,                  # chat_size
        (message.is_from_me? ? 'sent' : 'received'), # direction
        message.address,                             # address
        message.text,                                # text
        just_emojis(message.text),                   # emoji
        guid,                                        # guid
      ]
    end
  end
end

def load_v2(file, database, csv, guids)
  require 'models/v2'

  Models::V2.with_db(database) do
    each_by_page(Models::V2::Message.eager(:handle, chat: :handles)) do |message|
      if guids.include?(message.guid)
        $stderr.puts "skipping #{message.guid}" if @print_warnings
        next
      end

      guids << message.guid

      csv << [
        file,                                        # file_id
        next_message_id,                             # message_id
        timestamp_ms(message.timestamp),             # timestamp_ms
        message.service,                             # type
        message.chat.try(:handles).try(:count),      # chat_size
        (message.is_from_me? ? 'sent' : 'received'), # direction
        (message.handle && message.handle.id),       # address
        message.text,                                # text
        just_emojis(message.text),                   # emoji
        message.guid,                                # guid
      ]
    end
  end
end

guids = Set.new

csv = CSV.generate do |csv|
  csv << %w(file_id message_id timestamp_ms type chat_size direction address text emoji guid)
  ARGV.each do |file|
    begin
      $stderr.puts "starting #{file}"
      Database.new(file, false) do |db|
        if db.tables.include?(:handle)
          load_v2(file, db, csv, guids)
        else
          load_v1(file, db, csv, guids)
        end
      end
    rescue => e
      $stderr.puts "error in #{file}: #{e}"
    end
  end
end

puts csv
